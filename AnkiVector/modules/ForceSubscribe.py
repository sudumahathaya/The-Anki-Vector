  
#    Copyright (C) 2020-2021 by @Damantha_Jasinghe
#    This programme is a part of Liza TG bot project
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.


import logging
import time

from pyrogram import filters
from pyrogram.errors.exceptions.bad_request_400 import (
    ChatAdminRequired,
    PeerIdInvalid,
    UsernameNotOccupied,
    UserNotParticipant,
)
from pyrogram.types import ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup

from AnkiVector import DRAGONS as SUDO_USERS
from AnkiVector import pbot
from AnkiVector.modules.sql import forceSubscribe_sql as sql

logging.basicConfig(level=logging.INFO)

static_data_filter = filters.create(
    lambda _, __, query: query.data == "onUnMuteRequest"
)


@pbot.on_callback_query(static_data_filter)
def _onUnMuteRequest(client, cb):
    user_id = cb.from_user.id
    chat_id = cb.message.chat.id
    chat_db = sql.fs_settings(chat_id)
    if chat_db:
        channel = chat_db.channel
        chat_member = client.get_chat_member(chat_id, user_id)
        if chat_member.restricted_by:
            if chat_member.restricted_by.id == (client.get_me()).id:
                try:
                    client.get_chat_member(channel, user_id)
                    client.unban_chat_member(chat_id, user_id)
                    cb.message.delete()
                    # if cb.message.reply_to_message.from_user.id == user_id:
                    # cb.message.delete()
                except UserNotParticipant:
                    client.answer_callback_query(
                        cb.id,
                        text=f"‚ùó @{channel} ‡∂†‡∑ê‡∂±‡∂Ω‡∑ä ‡∂ë‡∂ö‡∂ß Join ‡∑Ä‡∑ô‡∂Ω‡∑è Unmute Button ‡∂ë‡∂ö ‡∂î‡∂∂‡∂±‡∑ä‡∂±....",
                        show_alert=True,
                    )
            else:
                client.answer_callback_query(
                    cb.id,
                    text="‚ùó  ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä‡∂Ω‡∑è ‡∂î‡∂∫‡∑è‡∑Ä ‡∑Ä‡∑ô‡∂± ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä‡∂ö‡∑ä ‡∂±‡∑í‡∑É‡∑è Mute ‡∂ö‡∂ª‡∂Ω‡∑è..",
                    show_alert=True,
                )
        else:
            if (
                not client.get_chat_member(chat_id, (client.get_me()).id).status
                == "administrator"
            ):
                client.send_message(
                    chat_id,
                    f"‚ùó **{cb.from_user.mention} ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è ‡∂î‡∂∂‡∑Ä Unmute ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂∏‡∂∏ ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∑ö ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä‡∑Ä‡∂ª‡∂∫‡∂ö‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ‡∂±‡∑í‡∑É‡∑è ‡∂ë‡∂∫ ‡∑É‡∑í‡∂Ø‡∑î‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂≠‡∂±‡∂≠‡∑î‡∂ª ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±....**\n__#Leaving this chat...__",
                )

            else:
                client.answer_callback_query(
                    cb.id,
                    text="‚ùó ‡∂Ö‡∑Ä‡∑Ä‡∑è‡∂Ø‡∂∫‡∂∫‡∑í: ‡∂î‡∂∂‡∂ß ‡∂ö‡∂≠‡∑è‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑è‡∑Ä ‡∂≠‡∑í‡∂∂‡∑í‡∂∫‡∂Ø‡∑ì Unmute Button ‡∂ë‡∂ö ‡∂î‡∂∂‡∂±‡∑ä‡∂± ‡∂ë‡∂¥‡∑è..",
                    show_alert=True,
                )


@pbot.on_message(filters.text & ~filters.private & ~filters.edited, group=1)
def _check_member(client, message):
    chat_id = message.chat.id
    chat_db = sql.fs_settings(chat_id)
    if chat_db:
        user_id = message.from_user.id
        if (
            not client.get_chat_member(chat_id, user_id).status
            in ("administrator", "creator")
            and not user_id in SUDO_USERS
        ):
            channel = chat_db.channel
            try:
                client.get_chat_member(channel, user_id)
            except UserNotParticipant:
                try:
                    sent_message = message.reply_text(
                        "Welcome {} üôè \n **‡∂î‡∂∂ ‡∂Ö‡∂¥‡∂ú‡∑ö  @{} ‡∂†‡∑ê‡∂±‡∂Ω‡∑ä ‡∂ë‡∂ö Subscribe ‡∂ö‡∂ª‡∂Ω‡∑è ‡∂±‡∑ê‡∑Ñ‡∑ê. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂†‡∑ê‡∂±‡∂Ω‡∑ä ‡∂ë‡∂ö‡∂ß Join ‡∑Ä‡∑ì Unmute Button ‡∂ë‡∂ö ‡∂î‡∂∂‡∂±‡∑ä‡∂±** ".format(
                            message.from_user.mention, channel, channel
                        ),
                        disable_web_page_preview=True,
                        reply_markup=InlineKeyboardMarkup(
                            [
                                [
                                    InlineKeyboardButton(
                                        "Join Channel",
                                        url="https://t.me/{}".format(channel),
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        "UnMute Me", callback_data="onUnMuteRequest"
                                    )
                                ],
                            ]
                        ),
                    )
                    client.restrict_chat_member(
                        chat_id, user_id, ChatPermissions(can_send_messages=False)
                    )
                except ChatAdminRequired:
                    sent_message.edit(
                        "‚ùó **‡∂∏‡∂∏ ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä‡∑Ä‡∂ª‡∂∫‡∂ö‡∑î ‡∂±‡∑ú‡∑Ä‡∑ô‡∂∫‡∑í.**\n__‡∂∏‡∂ß Ban Permission ‡∑É‡∂∏‡∂ú ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. \n#Ending FSub...__"
                    )

            except ChatAdminRequired:
                client.send_message(
                    chat_id,
                    text=f"‚ùó **‡∂∏‡∂∏ ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä‡∑Ä‡∂ª‡∂∫‡∂ö‡∑î ‡∂±‡∑ú‡∑Ä‡∑ô‡∂∫‡∑í [channel]({channel_url}) ‡∂∏‡∑ô‡∂∏ ‡∂†‡∑ê‡∂±‡∂Ω‡∂∫‡∑ö...**\n__‡∂∏‡∂ß ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.\n#Ending FSub...__",
                )


@pbot.on_message(filters.command(["forcesubscribe", "fsub"]) & ~filters.private)
def config(client, message):
    user = client.get_chat_member(message.chat.id, message.from_user.id)
    if user.status is "creator" or user.user.id in SUDO_USERS:
        chat_id = message.chat.id
        if len(message.command) > 1:
            input_str = message.command[1]
            input_str = input_str.replace("@", "")
            if input_str.lower() in ("off", "no", "disable"):
                sql.disapprove(chat_id)
                message.reply_text("‚ùå **Force Subscribe is Disabled Successfully.**")
            elif input_str.lower() in ("clear"):
                sent_message = message.reply_text(
                    "**‡∂∏‡∂∏ Mute ‡∂ö‡∑Ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∂Ø‡∑ô‡∂±‡∑è Unmute ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.**"
                )
                try:
                    for chat_member in client.get_chat_members(
                        message.chat.id, filter="restricted"
                    ):
                        if chat_member.restricted_by.id == (client.get_me()).id:
                            client.unban_chat_member(chat_id, chat_member.user.id)
                            time.sleep(1)
                    sent_message.edit("‚úÖ **‡∂∏‡∂∏ Mute ‡∂ö‡∑Ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∂Ø‡∑ô‡∂±‡∑è Unmute ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.**")
                except ChatAdminRequired:
                    sent_message.edit(
                        "‚ùó **‡∂∏‡∂∏ ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä‡∑Ä‡∂ª‡∂∫‡∂ö‡∑î ‡∂±‡∑ú‡∑Ä‡∑ö...**\n__‡∂∏‡∂ß Unmute ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∑Ñ‡∑ê ‡∂∏‡∑è‡∑Ä Ban Permission ‡∑É‡∂∏‡∂ú ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂≠‡∂±‡∂≠‡∑î‡∂ª‡∂ß ‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±..__"
                    )
            else:
                try:
                    client.get_chat_member(input_str, "me")
                    sql.add_channel(chat_id, input_str)
                    message.reply_text(
                        f"‚úÖ **Force Subscribe is Enabled**\n__Force Subscribe is enabled, all the group members have to subscribe this [channel](https://t.me/{input_str}) in order to send messages in this group.__",
                        disable_web_page_preview=True,
                    )
                except UserNotParticipant:
                    message.reply_text(
                        f"‚ùó **‡∂∏‡∂∏ ‡∂†‡∑ê‡∂±‡∂Ω‡∂∫‡∑ö ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä‡∑Ä‡∂ª‡∂∫‡∂ö‡∑î ‡∂±‡∑ú‡∑Ä‡∑ö.**\n__‡∂∏‡∂∏ ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä‡∑Ä‡∂ª‡∂∫‡∂ö‡∑î ‡∂±‡∑ú‡∑Ä‡∑ö[channel]({channel_url}). ‡∂à‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∂≠‡∂±‡∂≠‡∑î‡∂ª ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±..__",
                        disable_web_page_preview=True,
                    )
                except (UsernameNotOccupied, PeerIdInvalid):
                    message.reply_text(f"‚ùó **Invalid Channel Username.**")
                except Exception as err:
                    message.reply_text(f"‚ùó **ERROR:** ```{err}```")
        else:
            if sql.fs_settings(chat_id):
                message.reply_text(
                    f"‚úÖ **Force Subscribe is enabled in this chat.**\n__For this [Channel](https://t.me/{sql.fs_settings(chat_id).channel})__",
                    disable_web_page_preview=True,
                )
            else:
                message.reply_text("‚ùå **Force Subscribe is disabled in this chat.**")
    else:
        message.reply_text(
            "‚ùó **Group Creator Required**\n__You have to be the group creator to do that.__"
        )


__help__ = """
*ForceSubscribe:*
‚ùÇ Anki Vector can mute members who are not subscribed your channel until they subscribe
‚ùÇ When enabled I will mute unsubscribed members and show them a unmute button. When they pressed the button I will unmute them
*Setup*
1) First of all add me in the group as admin with ban users permission and in the channel as admin.
Note: Only creator of the group can setup me and i will not allow force subscribe again if not done so.
 
*Commmands*
‚ùÇ /ForceSubscribe - To get the current settings.
‚ùÇ /ForceSubscribe no/off/disable - To turn of ForceSubscribe.
‚ùÇ /ForceSubscribe {channel username} - To turn on and setup the channel.
‚ùÇ /ForceSubscribe clear - To unmute all members who muted by me.
Note: /FSub is an alias of /ForceSubscribe
 
"""
__mod_name__ = "Force Subscribe"
